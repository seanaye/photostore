// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["deno"]
  output          = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Photo {
  id          Int              @id @default(autoincrement())
  previewUrl  String
  fullUrl     String
  rawUrl      String
  captureDate DateTime
  price       Int
  purchases   Purchase[]
  albums      PhotosOnAlbums[]
  createdAt   DateTime         @default(now())
}

model PhotosOnAlbums {
  photoId   Int
  photo     Photo    @relation(fields: [photoId], references: [id])
  albumId   Int
  album     Album    @relation(fields: [albumId], references: [id])
  createdAt DateTime @default(now())

  @@id([photoId, albumId])
}

model Album {
  id        Int              @id @default(autoincrement())
  name      String
  photos    PhotosOnAlbums[]
  createdAt DateTime         @default(now())
}

model Purchase {
  id        Int      @id @default(autoincrement())
  photoId   Int
  photo     Photo    @relation(fields: [photoId], references: [id])
  cartId    Int
  cart      Cart     @relation(fields: [cartId], references: [id])
  createdAt DateTime @default(now())
}

model Notification {
  id           Int      @id @default(autoincrement())
  emailId      Int
  email        Email    @relation(fields: [emailId], references: [id])
  alertForDate DateTime
  createdAt    DateTime @default(now())

  @@unique([emailId, alertForDate], name: "emailNotification")
}

model Cart {
  id             Int        @id @default(autoincrement())
  cartIdentifier String     @unique
  purchases      Purchase[]
  emailId        Int
  email          Email      @relation(fields: [emailId], references: [id])
  date           DateTime   @default(now())
}

model Email {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  purchases     Cart[]
  notifications Notification[]
  createdAt     DateTime       @default(now())
}
